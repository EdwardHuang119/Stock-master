'''
    运算符优先级 

    各种类型的运算符具有优先级。例如在“if”语句的条件判断表达式中，包含各种不同
类型的运算表达式，条件判断表达式中包含算术运算、成员运算、关系运算等，复杂的表
达式甚至包含位运算、成员切片等操作。因此对这些不同类型的运算符（操作符）进行优
先级规范。优先级高的运算符先进行操作，优先级低的运算符后进行操作。
    表3-8列出了从最低到最高优先级的所有运算符。

    表3-8运算符优先级
优先级	运算符	描述
1	lambda	lambda表达式。
2	or	逻辑(布尔) “或”。
3	and	逻辑(布尔) “与”。
4	not x	逻辑(布尔) “非”。
5	in，not in	成员测试。
6	is，is not	同一性（身份）测试。
7	，=，，=，!=，==	比较。
8		按位或。
9	^	按位异或。
10	&	按位与。
11	，	移位。
12	+，-	加法与减法。
13	，，%	乘法、除法与取余。
14	+x，-x	正负号。
15	~x	按位翻转。
16		指数(次幂)运算。
17	x.attribute	属性或方法。
18	x[index]	下标。
19	x[index1index2]	寻址段，或切片。
20	f(arguments...)	函数调用。
21	()	小括号()能提高优先级。

    表3-8优先级数字越大，优先级越高。
    优先顺序规则如下
（1）先计算小括号“()”中表达式，最中间的小括号“()”中表达式先计算。例如：
     “4(2+3)”，计算结果：20。
（2）函数调用。例如：“10abs(2-8)”，计算结果：60。
（3）列表等下标和切片计算。例如：“5'abcdefg' [3] ”或“ 'abcdefg'[25]”，结
         果是字符串“ddddd”和“cde”。
（4）属性或方法的“.”运算，例如：“('  xy'+'abc  ').strip()”，结果字符是“xyabc”。
（5）指数(次幂)运算。
（6）一元算术运算，例如：“~x”，“+x”，“-x”。
（7）二元算术运算，先乘除“，”；后加减“+，-”。
（8）二进制移位运算，按位与，按位异或，按位或。
（9）比较运算，例如“，=，，=，!=，==”。
（10）身份测试、成员测试运算。
（11）逻辑(布尔)运算。
（12）lambda表达式。

    上述规则中的概念，在以后学习中会有用到，读者可先了解。
    下面给出示例“优先运算符代码代码3-18”。

# -- coding utf-8 --
#运算符优先级示例3-18
a = 20
b = 5
c = 6
d = 3
print (a=%d b=%d c=%d d=%d % (a,b,c,d ))

e = a+bcd    
print ('e = a+bcd = 20+8   运算结果 e=  ',e)

e = (a + b)  c  d      
print ('e = (a+b)cd = 2463 运算结果 e=  ',e)

f=a+b%cd
print ('f=a+b%cd=20+5%216 运算结果 f=  ',f)

g=a+bc 2
print ('g=a+bc 2 =20+30 2 运算结果 g=  ',g)
print(4(2+3))
print(10abs(2-8))
print(5'abcdefg'[3])
print('abcdefg'[25])
print(('  xy'+'abc  ').strip())
命令执行结果：
a=20 b=5 c=6 d=3
e = a+bcd = 20+8   运算结果 e=   30.0
e = (a+b)cd = 2463 运算结果 e=   50.0
f=a+b%cd=20+5%216 运算结果 f=   25
g=a+bc 2 =20+30 2 运算结果 g=   200
20
60
ddddd
cde
xyabc
'''