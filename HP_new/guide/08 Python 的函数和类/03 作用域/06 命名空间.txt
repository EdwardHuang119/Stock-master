'''
    命名空间

    Python3命名空间，是为了防止不同人编写类库发生命名冲突而设计的，命名空间可以
使变量、函数名称、类名称作用在本空间内，而其它空间可以使用同样的名称。就好比不
同的文件夹下可以有相同的文件名一样，但在相同的文件夹下不能有重复的文件名，命名
空间同这个虚拟的文件夹。 
    Python3的LEGB法则仅仅适合同一个模块的变量的作用域，不同模块文件的作用域是不
相同的。因此可以使用模块名或模块的别名作为命名空间，就可以实现不同模块之间的变量
数据共享。
    我们开发一个系统，肯定是由很多模块文件构成。例如后面给大家介绍的小白量化分析系
统，很多系统初始化值都存放在一个模块文件中，不同模块可以共享或者修改系统默认参数
变量。
    小白量化系统模块全局变量都在HP_global.py这个模块文件中。其中一个模块文件HP_set.py
对它的变量进行初始化赋值。其它模块文件，只要包含import HP_global as g这条语句，就
能获取命名空间g的所有全局变量值，也可以进行修改这些变量。
    见示例4-22。
# -- coding utf-8 --
import HP_global as g
'''
#-----------------------------------
下面是 HP_global 部分内容
#运行系统环境设置
# os=1 windows,=2 linux, =3 mac oS
global os   #操作系统
global pyver  #Python版本

#软件名称设置
global name  #软件名称
global title #软件标题
global developer #软件开发者
global ver   #软件版本号

#软件数据目录
global datapath  #数据目录
global prgpath  #软件目录
#-----------------------------------
'''
import HP_set
'''
#-----------------------------------
下面是 HP_set 部分内容
##数据主目录
g.datapath='xbdata'
g.prgpath='xb'

#软件名称
g.root=None
g.name='小白证券分析研究平台'
g.title='小白证券分析研究平台(1.00版) 设计荷蒲 QQ2775205'
g.ico='tt.ico'
g.winW=1200
g.winH=760
g.ver=1.01
g.user='18578755056'
g.login=False
g.os=1
#-----------------------------------
'''

# g. name 是g命令空间的全局变量，整个运行期间所有模块都能访问和修改
#我们这个模块来获取这些定制的值
print('软件名称： ',g.name)
print('软件标题： ',g.title)
print('下面修改g命名空间变量')
g.name='荷蒲证券分析研究平台'
g.title='荷蒲证券分析研究平台(1.00版)'
print('软件名称： ',g.name)
print('软件标题： ',g.title)

    程序运行结果：
软件名称：  小白证券分析研究平台
软件标题：  小白证券分析研究平台(1.00版) 设计荷蒲 QQ2775205
下面修改g命名空间变量
软件名称：  荷蒲证券分析研究平台
软件标题：  荷蒲证券分析研究平台(1.00版)
    从上面结果看到，示例4-22程序修改了命名空间g的全局变量。因此正在运行
的程序，任何一个模块文件都能获取或修改命名空间g的全局变量。
'''
